// Generated by Haxe 4.3.4
#ifndef INCLUDED_states_SplashScreenState
#define INCLUDED_states_SplashScreenState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(states,SplashScreenState)

namespace states{


class HXCPP_CLASS_ATTRIBUTES SplashScreenState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef SplashScreenState_obj OBJ_;
		SplashScreenState_obj();

	public:
		enum { _hx_ClassId = 0x3fd80158 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="states.SplashScreenState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"states.SplashScreenState"); }
		static ::hx::ObjectPtr< SplashScreenState_obj > __new();
		static ::hx::ObjectPtr< SplashScreenState_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~SplashScreenState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("SplashScreenState",be,54,f3,62); }

		 ::flixel::text::FlxText introText;
		 ::flixel::text::FlxText sToSkip;
		void create();

		void update(Float elapsed);

		void onComplete();
		::Dynamic onComplete_dyn();

		void onComplete2();
		::Dynamic onComplete2_dyn();

		void onComplete3();
		::Dynamic onComplete3_dyn();

};

} // end namespace states

#endif /* INCLUDED_states_SplashScreenState */ 
