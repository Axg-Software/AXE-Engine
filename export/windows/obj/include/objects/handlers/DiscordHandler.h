// Generated by Haxe 4.3.4
#ifndef INCLUDED_objects_handlers_DiscordHandler
#define INCLUDED_objects_handlers_DiscordHandler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_4d2c8952d9865d7f
#define INCLUDED_4d2c8952d9865d7f
#include "discord_rpc.h"
#endif
HX_DECLARE_CLASS2(objects,handlers,DiscordHandler)

namespace objects{
namespace handlers{


class HXCPP_CLASS_ATTRIBUTES DiscordHandler_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef DiscordHandler_obj OBJ_;
		DiscordHandler_obj();

	public:
		enum { _hx_ClassId = 0x2c3955b7 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="objects.handlers.DiscordHandler")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"objects.handlers.DiscordHandler"); }

		inline static ::hx::ObjectPtr< DiscordHandler_obj > __new() {
			::hx::ObjectPtr< DiscordHandler_obj > __this = new DiscordHandler_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< DiscordHandler_obj > __alloc(::hx::Ctx *_hx_ctx) {
			DiscordHandler_obj *__this = (DiscordHandler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DiscordHandler_obj), false, "objects.handlers.DiscordHandler"));
			*(void **)__this = DiscordHandler_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~DiscordHandler_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("DiscordHandler",9e,7f,a5,6b); }

		static void __boot();
		static bool _revokeLoop;
		static void init();
		static ::Dynamic init_dyn();

		static void onReady(const  DiscordUser* request);

		static void onDisconnected(int errorCode,const char* message);

		static void onError(int errorCode,const char* message);

};

} // end namespace objects
} // end namespace handlers

#endif /* INCLUDED_objects_handlers_DiscordHandler */ 
