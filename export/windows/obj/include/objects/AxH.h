// Generated by Haxe 4.3.4
#ifndef INCLUDED_objects_AxH
#define INCLUDED_objects_AxH

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS1(objects,AxH)

namespace objects{


class HXCPP_CLASS_ATTRIBUTES AxH_obj : public  ::flixel::FlxBasic_obj
{
	public:
		typedef  ::flixel::FlxBasic_obj super;
		typedef AxH_obj OBJ_;
		AxH_obj();

	public:
		enum { _hx_ClassId = 0x152729fd };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="objects.AxH")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"objects.AxH"); }
		static ::hx::ObjectPtr< AxH_obj > __new();
		static ::hx::ObjectPtr< AxH_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AxH_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AxH",51,bb,31,00); }

		static void wait(int milliseconds, ::Dynamic callback);
		static ::Dynamic wait_dyn();

		static void cloneRepository(::String repositoryUrl,::String destination);
		static ::Dynamic cloneRepository_dyn();

};

} // end namespace objects

#endif /* INCLUDED_objects_AxH */ 
