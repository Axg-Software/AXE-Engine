// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_CreditState
#include <states/CreditState.h>
#endif
#ifndef INCLUDED_states_MenuState
#include <states/MenuState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e4d9251ecae82e72_8_new,"states.CreditState","new",0xbe98c8be,"states.CreditState.new","states/CreditState.hx",8,0x6b5cb833)
HX_LOCAL_STACK_FRAME(_hx_pos_e4d9251ecae82e72_14_create,"states.CreditState","create",0x2b577d5e,"states.CreditState.create","states/CreditState.hx",14,0x6b5cb833)
HX_LOCAL_STACK_FRAME(_hx_pos_e4d9251ecae82e72_25_update,"states.CreditState","update",0x364d9c6b,"states.CreditState.update","states/CreditState.hx",25,0x6b5cb833)
HX_LOCAL_STACK_FRAME(_hx_pos_e4d9251ecae82e72_29_update,"states.CreditState","update",0x364d9c6b,"states.CreditState.update","states/CreditState.hx",29,0x6b5cb833)
namespace states{

void CreditState_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_e4d9251ecae82e72_8_new)
HXLINE(  11)		this->credits =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,::flixel::FlxG_obj::width,HX_("Deep_Fried_Bread: Everything",fb,e1,1e,bb),26,null());
HXLINE(  10)		this->backToMenu =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,632,::flixel::FlxG_obj::width,HX_("Back to menu",8b,1b,25,64),64,null());
HXLINE(   8)		super::__construct();
            	}

Dynamic CreditState_obj::__CreateEmpty() { return new CreditState_obj; }

void *CreditState_obj::_hx_vtable = 0;

Dynamic CreditState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CreditState_obj > _hx_result = new CreditState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CreditState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x4f5cbaf6) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x4f5cbaf6;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void CreditState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_e4d9251ecae82e72_14_create)
HXLINE(  15)		this->super::create();
HXLINE(  17)		this->credits->setFormat(null(),64,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  18)		this->backToMenu->setFormat(null(),64,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  20)		this->add(this->backToMenu);
HXLINE(  21)		this->add(this->credits);
            	}


void CreditState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_e4d9251ecae82e72_25_update)
HXLINE(  26)		this->super::update(elapsed);
HXLINE(  27)		bool _hx_tmp;
HXDLIN(  27)		if (::flixel::FlxG_obj::mouse->overlaps(this->backToMenu,null())) {
HXLINE(  27)			_hx_tmp = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE(  27)			_hx_tmp = false;
            		}
HXDLIN(  27)		if (_hx_tmp) {
HXLINE(  29)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState( ::states::MenuState_obj::__alloc( HX_CTX ));
HXDLIN(  29)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  29)			bool _hx_tmp1;
HXDLIN(  29)			if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  29)				_hx_tmp1 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            			}
            			else {
HXLINE(  29)				_hx_tmp1 = true;
            			}
HXDLIN(  29)			if (_hx_tmp1) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_e4d9251ecae82e72_29_update)
HXLINE(  29)					if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  29)						::flixel::FlxG_obj::game->_nextState = nextState;
            					}
            					else {
HXLINE(  29)						::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  29)				::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_0(nextState,stateOnCall)));
            			}
            		}
            	}



::hx::ObjectPtr< CreditState_obj > CreditState_obj::__new() {
	::hx::ObjectPtr< CreditState_obj > __this = new CreditState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CreditState_obj > CreditState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CreditState_obj *__this = (CreditState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CreditState_obj), true, "states.CreditState"));
	*(void **)__this = CreditState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CreditState_obj::CreditState_obj()
{
}

void CreditState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CreditState);
	HX_MARK_MEMBER_NAME(backToMenu,"backToMenu");
	HX_MARK_MEMBER_NAME(credits,"credits");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CreditState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(backToMenu,"backToMenu");
	HX_VISIT_MEMBER_NAME(credits,"credits");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CreditState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"credits") ) { return ::hx::Val( credits ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"backToMenu") ) { return ::hx::Val( backToMenu ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CreditState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"credits") ) { credits=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"backToMenu") ) { backToMenu=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CreditState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("backToMenu",41,96,9c,bc));
	outFields->push(HX_("credits",1a,0e,5e,13));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CreditState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CreditState_obj,backToMenu),HX_("backToMenu",41,96,9c,bc)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CreditState_obj,credits),HX_("credits",1a,0e,5e,13)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CreditState_obj_sStaticStorageInfo = 0;
#endif

static ::String CreditState_obj_sMemberFields[] = {
	HX_("backToMenu",41,96,9c,bc),
	HX_("credits",1a,0e,5e,13),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class CreditState_obj::__mClass;

void CreditState_obj::__register()
{
	CreditState_obj _hx_dummy;
	CreditState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.CreditState",cc,51,22,fc);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CreditState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CreditState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CreditState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CreditState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
