// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_objects_WaterMark
#include <objects/WaterMark.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_CreditState
#include <states/CreditState.h>
#endif
#ifndef INCLUDED_states_MenuState
#include <states/MenuState.h>
#endif
#ifndef INCLUDED_states_OptionsState
#include <states/OptionsState.h>
#endif
#ifndef INCLUDED_states_PlayState
#include <states/PlayState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b0d696801db43af0_14_new,"states.MenuState","new",0xfb0d7598,"states.MenuState.new","states/MenuState.hx",14,0x6393c259)
HX_LOCAL_STACK_FRAME(_hx_pos_b0d696801db43af0_24_create,"states.MenuState","create",0x702ed4c4,"states.MenuState.create","states/MenuState.hx",24,0x6393c259)
HX_LOCAL_STACK_FRAME(_hx_pos_b0d696801db43af0_42_update,"states.MenuState","update",0x7b24f3d1,"states.MenuState.update","states/MenuState.hx",42,0x6393c259)
HX_LOCAL_STACK_FRAME(_hx_pos_b0d696801db43af0_47_update,"states.MenuState","update",0x7b24f3d1,"states.MenuState.update","states/MenuState.hx",47,0x6393c259)
HX_LOCAL_STACK_FRAME(_hx_pos_b0d696801db43af0_51_update,"states.MenuState","update",0x7b24f3d1,"states.MenuState.update","states/MenuState.hx",51,0x6393c259)
HX_LOCAL_STACK_FRAME(_hx_pos_b0d696801db43af0_55_update,"states.MenuState","update",0x7b24f3d1,"states.MenuState.update","states/MenuState.hx",55,0x6393c259)
HX_LOCAL_STACK_FRAME(_hx_pos_b0d696801db43af0_91_settings,"states.MenuState","settings",0x5869ecab,"states.MenuState.settings","states/MenuState.hx",91,0x6393c259)
namespace states{

void MenuState_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_b0d696801db43af0_14_new)
HXLINE(  19)		this->optionsButton =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,256,::flixel::FlxG_obj::width,HX_("Options",3e,5b,4f,ad),0,null());
HXLINE(  18)		this->creditsButton =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,192,::flixel::FlxG_obj::width,HX_("Credits",fa,35,af,e0),0,null());
HXLINE(  17)		this->startButton =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,128,::flixel::FlxG_obj::width,HX_("New Game",f2,3f,d9,05),0,null());
HXLINE(  16)		this->menuText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,::flixel::FlxG_obj::width,HX_("[GAME TITLE HERE]",f2,6e,ac,25),0,null());
HXLINE(  14)		super::__construct();
            	}

Dynamic MenuState_obj::__CreateEmpty() { return new MenuState_obj; }

void *MenuState_obj::_hx_vtable = 0;

Dynamic MenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuState_obj > _hx_result = new MenuState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7c795c9f) {
		if (inClassId<=(int)0x62817b24) {
			if (inClassId<=(int)0x563293a6) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x563293a6;
			} else {
				return inClassId==(int)0x62817b24;
			}
		} else {
			return inClassId==(int)0x7c795c9f;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7fce9990;
	}
}

void MenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_b0d696801db43af0_24_create)
HXLINE(  25)		this->super::create();
HXLINE(  27)		this->waterMark =  ::objects::WaterMark_obj::__alloc( HX_CTX );
HXLINE(  29)		this->menuText->setFormat(null(),72,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  30)		this->startButton->setFormat(null(),64,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  31)		this->creditsButton->setFormat(null(),64,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  32)		this->optionsButton->setFormat(null(),64,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  34)		this->add(this->menuText);
HXLINE(  35)		this->add(this->startButton);
HXLINE(  36)		this->add(this->creditsButton);
HXLINE(  37)		this->add(this->optionsButton);
HXLINE(  38)		this->add(this->waterMark);
            	}


void MenuState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_b0d696801db43af0_42_update)
HXLINE(  43)		this->super::update(elapsed);
HXLINE(  45)		bool _hx_tmp;
HXDLIN(  45)		if (::flixel::FlxG_obj::mouse->overlaps(this->startButton,null())) {
HXLINE(  45)			_hx_tmp = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE(  45)			_hx_tmp = false;
            		}
HXDLIN(  45)		if (_hx_tmp) {
HXLINE(  47)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState( ::states::PlayState_obj::__alloc( HX_CTX ));
HXDLIN(  47)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  47)			bool _hx_tmp1;
HXDLIN(  47)			if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  47)				_hx_tmp1 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            			}
            			else {
HXLINE(  47)				_hx_tmp1 = true;
            			}
HXDLIN(  47)			if (_hx_tmp1) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_b0d696801db43af0_47_update)
HXLINE(  47)					if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  47)						::flixel::FlxG_obj::game->_nextState = nextState;
            					}
            					else {
HXLINE(  47)						::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  47)				::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_0(nextState,stateOnCall)));
            			}
            		}
            		else {
HXLINE(  49)			bool _hx_tmp2;
HXDLIN(  49)			if (::flixel::FlxG_obj::mouse->overlaps(this->creditsButton,null())) {
HXLINE(  49)				_hx_tmp2 = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            			}
            			else {
HXLINE(  49)				_hx_tmp2 = false;
            			}
HXDLIN(  49)			if (_hx_tmp2) {
HXLINE(  51)				 ::Dynamic nextState1 = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState( ::states::CreditState_obj::__alloc( HX_CTX ));
HXDLIN(  51)				 ::flixel::FlxState stateOnCall1 = ::flixel::FlxG_obj::game->_state;
HXDLIN(  51)				bool _hx_tmp3;
HXDLIN(  51)				if (::Std_obj::isOfType(nextState1,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  51)					_hx_tmp3 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState1) ));
            				}
            				else {
HXLINE(  51)					_hx_tmp3 = true;
            				}
HXDLIN(  51)				if (_hx_tmp3) {
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::Dynamic,nextState1, ::flixel::FlxState,stateOnCall1) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_b0d696801db43af0_51_update)
HXLINE(  51)						if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall1 )) {
HXLINE(  51)							::flixel::FlxG_obj::game->_nextState = nextState1;
            						}
            						else {
HXLINE(  51)							::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE(  51)					::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_1(nextState1,stateOnCall1)));
            				}
            			}
            			else {
HXLINE(  53)				bool _hx_tmp4;
HXDLIN(  53)				if (::flixel::FlxG_obj::mouse->overlaps(this->optionsButton,null())) {
HXLINE(  53)					_hx_tmp4 = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            				}
            				else {
HXLINE(  53)					_hx_tmp4 = false;
            				}
HXDLIN(  53)				if (_hx_tmp4) {
HXLINE(  55)					 ::Dynamic nextState2 = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState( ::states::OptionsState_obj::__alloc( HX_CTX ));
HXDLIN(  55)					 ::flixel::FlxState stateOnCall2 = ::flixel::FlxG_obj::game->_state;
HXDLIN(  55)					bool _hx_tmp5;
HXDLIN(  55)					if (::Std_obj::isOfType(nextState2,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  55)						_hx_tmp5 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState2) ));
            					}
            					else {
HXLINE(  55)						_hx_tmp5 = true;
            					}
HXDLIN(  55)					if (_hx_tmp5) {
            						HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_2, ::Dynamic,nextState2, ::flixel::FlxState,stateOnCall2) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_b0d696801db43af0_55_update)
HXLINE(  55)							if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall2 )) {
HXLINE(  55)								::flixel::FlxG_obj::game->_nextState = nextState2;
            							}
            							else {
HXLINE(  55)								::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE(  55)						::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_2(nextState2,stateOnCall2)));
            					}
            				}
            			}
            		}
HXLINE(  59)		::String dir = HX_("assets\\data\\optionsData.txt",f1,9d,89,3f);
HXLINE(  61)		if (::sys::FileSystem_obj::exists(dir)) {
HXLINE(  63)			::String fileContents = ::sys::io::File_obj::getContent(dir);
HXLINE(  65)			if ((fileContents.indexOf(HX_("Color 1",14,14,b7,bc),null()) != -1)) {
HXLINE(  67)				this->settings(-65536);
            			}
            			else {
HXLINE(  69)				if ((fileContents.indexOf(HX_("Color 2",15,14,b7,bc),null()) != -1)) {
HXLINE(  71)					this->settings(-16776961);
            				}
            				else {
HXLINE(  73)					if ((fileContents.indexOf(HX_("Color 3",16,14,b7,bc),null()) != -1)) {
HXLINE(  75)						this->settings(-16744448);
            					}
            					else {
HXLINE(  79)						this->settings(-1);
            					}
            				}
            			}
            		}
            		else {
HXLINE(  84)			::haxe::Log_obj::trace(HX_("File does not exist.",87,83,87,1d),::hx::SourceInfo(HX_("source/states/MenuState.hx",e5,5b,d8,54),84,HX_("states.MenuState",a6,09,15,7e),HX_("update",09,86,05,87)));
            		}
            	}


void MenuState_obj::settings(int color){
            	HX_STACKFRAME(&_hx_pos_b0d696801db43af0_91_settings)
HXDLIN(  91)		this->menuText->set_color(color);
            	}


HX_DEFINE_DYNAMIC_FUNC1(MenuState_obj,settings,(void))


::hx::ObjectPtr< MenuState_obj > MenuState_obj::__new() {
	::hx::ObjectPtr< MenuState_obj > __this = new MenuState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MenuState_obj > MenuState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MenuState_obj *__this = (MenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuState_obj), true, "states.MenuState"));
	*(void **)__this = MenuState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MenuState_obj::MenuState_obj()
{
}

void MenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuState);
	HX_MARK_MEMBER_NAME(menuText,"menuText");
	HX_MARK_MEMBER_NAME(startButton,"startButton");
	HX_MARK_MEMBER_NAME(creditsButton,"creditsButton");
	HX_MARK_MEMBER_NAME(optionsButton,"optionsButton");
	HX_MARK_MEMBER_NAME(waterMark,"waterMark");
	HX_MARK_MEMBER_NAME(axh,"axh");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(menuText,"menuText");
	HX_VISIT_MEMBER_NAME(startButton,"startButton");
	HX_VISIT_MEMBER_NAME(creditsButton,"creditsButton");
	HX_VISIT_MEMBER_NAME(optionsButton,"optionsButton");
	HX_VISIT_MEMBER_NAME(waterMark,"waterMark");
	HX_VISIT_MEMBER_NAME(axh,"axh");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"axh") ) { return ::hx::Val( axh ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"menuText") ) { return ::hx::Val( menuText ); }
		if (HX_FIELD_EQ(inName,"settings") ) { return ::hx::Val( settings_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"waterMark") ) { return ::hx::Val( waterMark ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"startButton") ) { return ::hx::Val( startButton ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"creditsButton") ) { return ::hx::Val( creditsButton ); }
		if (HX_FIELD_EQ(inName,"optionsButton") ) { return ::hx::Val( optionsButton ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"axh") ) { axh=inValue.Cast<  ::flixel::FlxBasic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"menuText") ) { menuText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"waterMark") ) { waterMark=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"startButton") ) { startButton=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"creditsButton") ) { creditsButton=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"optionsButton") ) { optionsButton=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("menuText",ec,f9,68,53));
	outFields->push(HX_("startButton",f4,bf,c6,51));
	outFields->push(HX_("creditsButton",ac,73,ff,61));
	outFields->push(HX_("optionsButton",f0,e3,7c,0c));
	outFields->push(HX_("waterMark",c4,db,f7,ca));
	outFields->push(HX_("axh",91,03,4a,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuState_obj,menuText),HX_("menuText",ec,f9,68,53)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuState_obj,startButton),HX_("startButton",f4,bf,c6,51)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuState_obj,creditsButton),HX_("creditsButton",ac,73,ff,61)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuState_obj,optionsButton),HX_("optionsButton",f0,e3,7c,0c)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuState_obj,waterMark),HX_("waterMark",c4,db,f7,ca)},
	{::hx::fsObject /*  ::flixel::FlxBasic */ ,(int)offsetof(MenuState_obj,axh),HX_("axh",91,03,4a,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String MenuState_obj_sMemberFields[] = {
	HX_("menuText",ec,f9,68,53),
	HX_("startButton",f4,bf,c6,51),
	HX_("creditsButton",ac,73,ff,61),
	HX_("optionsButton",f0,e3,7c,0c),
	HX_("waterMark",c4,db,f7,ca),
	HX_("axh",91,03,4a,00),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("settings",e3,7c,3d,8b),
	::String(null()) };

::hx::Class MenuState_obj::__mClass;

void MenuState_obj::__register()
{
	MenuState_obj _hx_dummy;
	MenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.MenuState",a6,09,15,7e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
