// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_LogFrontEnd
#include <flixel/system/frontEnds/LogFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_typeLimit__NextState_NextState_Impl_
#include <flixel/util/typeLimit/_NextState/NextState_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_ds_List
#include <haxe/ds/List.h>
#endif
#ifndef INCLUDED_haxe_ds__List_ListNode
#include <haxe/ds/_List/ListNode.h>
#endif
#ifndef INCLUDED_haxe_io_Encoding
#include <haxe/io/Encoding.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_objects_AxH
#include <objects/AxH.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_states_MenuState
#include <states/MenuState.h>
#endif
#ifndef INCLUDED_states_OptionsState
#include <states/OptionsState.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5da54e4eff0f21d1_13_new,"states.OptionsState","new",0xfe867911,"states.OptionsState.new","states/OptionsState.hx",13,0x21df3c9e)
HX_LOCAL_STACK_FRAME(_hx_pos_5da54e4eff0f21d1_25_create,"states.OptionsState","create",0x69f482eb,"states.OptionsState.create","states/OptionsState.hx",25,0x21df3c9e)
HX_LOCAL_STACK_FRAME(_hx_pos_5da54e4eff0f21d1_40_update,"states.OptionsState","update",0x74eaa1f8,"states.OptionsState.update","states/OptionsState.hx",40,0x21df3c9e)
HX_LOCAL_STACK_FRAME(_hx_pos_5da54e4eff0f21d1_44_update,"states.OptionsState","update",0x74eaa1f8,"states.OptionsState.update","states/OptionsState.hx",44,0x21df3c9e)
HX_LOCAL_STACK_FRAME(_hx_pos_5da54e4eff0f21d1_115_removeRestart,"states.OptionsState","removeRestart",0xc43cf3dc,"states.OptionsState.removeRestart","states/OptionsState.hx",115,0x21df3c9e)
HX_LOCAL_STACK_FRAME(_hx_pos_5da54e4eff0f21d1_76_applySettings,"states.OptionsState","applySettings",0x4c4fac62,"states.OptionsState.applySettings","states/OptionsState.hx",76,0x21df3c9e)
namespace states{

void OptionsState_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_5da54e4eff0f21d1_13_new)
HXLINE(  22)		this->musicOptionDscSLC = 0;
HXLINE(  20)		this->restartGame =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,300,504,::flixel::FlxG_obj::width,HX_("Restart game to see changes",ce,1a,60,8e),64,null());
HXLINE(  19)		this->applyButton =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,504,::flixel::FlxG_obj::width,HX_("Apply",4e,f5,68,b7),64,null());
HXLINE(  18)		this->backToMenu =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,632,::flixel::FlxG_obj::width,HX_("Back to menu",8b,1b,25,64),64,null());
HXLINE(  16)		this->musicOptionDsc =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,64,::flixel::FlxG_obj::width,HX_("Color 1",14,14,b7,bc),null(),null());
HXLINE(  15)		this->musicOption =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,::flixel::FlxG_obj::width,HX_("Color of menu",6b,c1,b0,1c),null(),null());
HXLINE(  13)		super::__construct();
            	}

Dynamic OptionsState_obj::__CreateEmpty() { return new OptionsState_obj; }

void *OptionsState_obj::_hx_vtable = 0;

Dynamic OptionsState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< OptionsState_obj > _hx_result = new OptionsState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool OptionsState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x08fb7a61) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x08fb7a61;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void OptionsState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_5da54e4eff0f21d1_25_create)
HXLINE(  26)		this->super::create();
HXLINE(  28)		this->musicOption->setFormat(null(),64,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  29)		this->musicOptionDsc->setFormat(null(),32,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  30)		this->backToMenu->setFormat(null(),64,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  31)		this->applyButton->setFormat(null(),64,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  32)		this->restartGame->setFormat(null(),25,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  33)		this->add(this->musicOption);
HXLINE(  34)		this->add(this->musicOptionDsc);
HXLINE(  35)		this->add(this->backToMenu);
HXLINE(  36)		this->add(this->applyButton);
            	}


void OptionsState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_5da54e4eff0f21d1_40_update)
HXLINE(  41)		this->super::update(elapsed);
HXLINE(  42)		bool _hx_tmp;
HXDLIN(  42)		if (::flixel::FlxG_obj::mouse->overlaps(this->backToMenu,null())) {
HXLINE(  42)			_hx_tmp = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE(  42)			_hx_tmp = false;
            		}
HXDLIN(  42)		if (_hx_tmp) {
HXLINE(  44)			 ::Dynamic nextState = ::flixel::util::typeLimit::_NextState::NextState_Impl__obj::fromState( ::states::MenuState_obj::__alloc( HX_CTX ));
HXDLIN(  44)			 ::flixel::FlxState stateOnCall = ::flixel::FlxG_obj::game->_state;
HXDLIN(  44)			bool _hx_tmp1;
HXDLIN(  44)			if (::Std_obj::isOfType(nextState,::hx::ClassOf< ::flixel::FlxState >())) {
HXLINE(  44)				_hx_tmp1 = ::flixel::FlxG_obj::canSwitchTo(( ( ::flixel::FlxState)(nextState) ));
            			}
            			else {
HXLINE(  44)				_hx_tmp1 = true;
            			}
HXDLIN(  44)			if (_hx_tmp1) {
            				HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::Dynamic,nextState, ::flixel::FlxState,stateOnCall) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_5da54e4eff0f21d1_44_update)
HXLINE(  44)					if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,stateOnCall )) {
HXLINE(  44)						::flixel::FlxG_obj::game->_nextState = nextState;
            					}
            					else {
HXLINE(  44)						::flixel::FlxG_obj::log->advanced(HX_("`onOutroComplete` was called after the state was switched. This will be ignored",46,b2,58,c7),::flixel::_hx_system::debug::log::LogStyle_obj::WARNING,true);
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  44)				::flixel::FlxG_obj::game->_state->startOutro( ::Dynamic(new _hx_Closure_0(nextState,stateOnCall)));
            			}
            		}
HXLINE(  47)		bool _hx_tmp2;
HXDLIN(  47)		if (::flixel::FlxG_obj::mouse->overlaps(this->musicOptionDsc,null())) {
HXLINE(  47)			_hx_tmp2 = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE(  47)			_hx_tmp2 = false;
            		}
HXDLIN(  47)		if (_hx_tmp2) {
HXLINE(  49)			this->musicOptionDscSLC = (this->musicOptionDscSLC + 1);
            		}
HXLINE(  52)		bool _hx_tmp3;
HXDLIN(  52)		if (::flixel::FlxG_obj::mouse->overlaps(this->applyButton,null())) {
HXLINE(  52)			_hx_tmp3 = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE(  52)			_hx_tmp3 = false;
            		}
HXDLIN(  52)		if (_hx_tmp3) {
HXLINE(  54)			::states::OptionsState_obj::applySettings(this->musicOptionDsc->text);
HXLINE(  55)			this->add(this->restartGame);
HXLINE(  56)			::objects::AxH_obj::wait(2000,this->removeRestart_dyn());
            		}
HXLINE(  59)		switch((int)(this->musicOptionDscSLC)){
            			case (int)0: {
HXLINE(  62)				this->musicOptionDsc->set_text(HX_("Color 1",14,14,b7,bc));
            			}
            			break;
            			case (int)1: {
HXLINE(  64)				this->musicOptionDsc->set_text(HX_("Color 2",15,14,b7,bc));
            			}
            			break;
            			case (int)2: {
HXLINE(  66)				this->musicOptionDsc->set_text(HX_("Color 3",16,14,b7,bc));
            			}
            			break;
            		}
HXLINE(  69)		if ((this->musicOptionDscSLC > 2)) {
HXLINE(  71)			this->musicOptionDscSLC = 0;
            		}
            	}


void OptionsState_obj::removeRestart(){
            	HX_STACKFRAME(&_hx_pos_5da54e4eff0f21d1_115_removeRestart)
HXDLIN( 115)		this->remove(this->restartGame,null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(OptionsState_obj,removeRestart,(void))

void OptionsState_obj::applySettings(::String example){
            	HX_GC_STACKFRAME(&_hx_pos_5da54e4eff0f21d1_76_applySettings)
HXLINE(  78)		::String dir = HX_("assets\\data\\optionsData.txt",f1,9d,89,3f);
HXLINE(  79)		::sys::io::File_obj::write(dir,false);
HXLINE(  81)		 ::haxe::ds::List options =  ::haxe::ds::List_obj::__alloc( HX_CTX );
HXLINE(  82)		options->add(example);
HXLINE(  84)		 ::sys::io::FileOutput output;
HXLINE(  86)		{
HXLINE(  86)			 ::haxe::ds::_List::ListNode _g_head = options->h;
HXDLIN(  86)			while(::hx::IsNotNull( _g_head )){
HXLINE(  86)				::String val = ( (::String)(_g_head->item) );
HXDLIN(  86)				_g_head = _g_head->next;
HXDLIN(  86)				::String i = val;
HXLINE(  88)				output = ::sys::io::File_obj::append(dir,false);
HXLINE(  89)				output->writeString((i + HX_("\n",0a,00,00,00)),null());
HXLINE(  90)				output->close();
            			}
            		}
HXLINE(  93)		if (::sys::FileSystem_obj::exists(dir)) {
HXLINE(  95)			::String fileContents = ::sys::io::File_obj::getContent(dir);
HXLINE(  97)			bool _hx_tmp;
HXDLIN(  97)			bool _hx_tmp1;
HXDLIN(  97)			if ((fileContents.indexOf(HX_("Color 1",14,14,b7,bc),null()) == -1)) {
HXLINE(  97)				_hx_tmp1 = (fileContents.indexOf(HX_("Color 2",15,14,b7,bc),null()) != -1);
            			}
            			else {
HXLINE(  97)				_hx_tmp1 = true;
            			}
HXDLIN(  97)			if (!(_hx_tmp1)) {
HXLINE(  97)				_hx_tmp = (fileContents.indexOf(HX_("Color 3",16,14,b7,bc),null()) != -1);
            			}
            			else {
HXLINE(  97)				_hx_tmp = true;
            			}
HXDLIN(  97)			if (_hx_tmp) {
HXLINE(  99)				::haxe::Log_obj::trace(HX_("The file contains 'Example'.",16,4c,c4,a1),::hx::SourceInfo(HX_("source/states/OptionsState.hx",92,22,4a,d1),99,HX_("states.OptionsState",9f,9c,96,4d),HX_("applySettings",71,dc,72,cb)));
            			}
            			else {
HXLINE( 103)				::haxe::Log_obj::trace(HX_("The file does not contain 'Example'.",f5,f8,3f,aa),::hx::SourceInfo(HX_("source/states/OptionsState.hx",92,22,4a,d1),103,HX_("states.OptionsState",9f,9c,96,4d),HX_("applySettings",71,dc,72,cb)));
            			}
            		}
            		else {
HXLINE( 108)			::haxe::Log_obj::trace(HX_("File does not exist.",87,83,87,1d),::hx::SourceInfo(HX_("source/states/OptionsState.hx",92,22,4a,d1),108,HX_("states.OptionsState",9f,9c,96,4d),HX_("applySettings",71,dc,72,cb)));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(OptionsState_obj,applySettings,(void))


::hx::ObjectPtr< OptionsState_obj > OptionsState_obj::__new() {
	::hx::ObjectPtr< OptionsState_obj > __this = new OptionsState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< OptionsState_obj > OptionsState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	OptionsState_obj *__this = (OptionsState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(OptionsState_obj), true, "states.OptionsState"));
	*(void **)__this = OptionsState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

OptionsState_obj::OptionsState_obj()
{
}

void OptionsState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(OptionsState);
	HX_MARK_MEMBER_NAME(musicOption,"musicOption");
	HX_MARK_MEMBER_NAME(musicOptionDsc,"musicOptionDsc");
	HX_MARK_MEMBER_NAME(backToMenu,"backToMenu");
	HX_MARK_MEMBER_NAME(applyButton,"applyButton");
	HX_MARK_MEMBER_NAME(restartGame,"restartGame");
	HX_MARK_MEMBER_NAME(musicOptionDscSLC,"musicOptionDscSLC");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void OptionsState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(musicOption,"musicOption");
	HX_VISIT_MEMBER_NAME(musicOptionDsc,"musicOptionDsc");
	HX_VISIT_MEMBER_NAME(backToMenu,"backToMenu");
	HX_VISIT_MEMBER_NAME(applyButton,"applyButton");
	HX_VISIT_MEMBER_NAME(restartGame,"restartGame");
	HX_VISIT_MEMBER_NAME(musicOptionDscSLC,"musicOptionDscSLC");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val OptionsState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"backToMenu") ) { return ::hx::Val( backToMenu ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"musicOption") ) { return ::hx::Val( musicOption ); }
		if (HX_FIELD_EQ(inName,"applyButton") ) { return ::hx::Val( applyButton ); }
		if (HX_FIELD_EQ(inName,"restartGame") ) { return ::hx::Val( restartGame ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"removeRestart") ) { return ::hx::Val( removeRestart_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"musicOptionDsc") ) { return ::hx::Val( musicOptionDsc ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"musicOptionDscSLC") ) { return ::hx::Val( musicOptionDscSLC ); }
	}
	return super::__Field(inName,inCallProp);
}

bool OptionsState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"applySettings") ) { outValue = applySettings_dyn(); return true; }
	}
	return false;
}

::hx::Val OptionsState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"backToMenu") ) { backToMenu=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"musicOption") ) { musicOption=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"applyButton") ) { applyButton=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"restartGame") ) { restartGame=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"musicOptionDsc") ) { musicOptionDsc=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"musicOptionDscSLC") ) { musicOptionDscSLC=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void OptionsState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("musicOption",fa,a1,bb,6d));
	outFields->push(HX_("musicOptionDsc",1a,54,f2,a9));
	outFields->push(HX_("backToMenu",41,96,9c,bc));
	outFields->push(HX_("applyButton",00,22,db,15));
	outFields->push(HX_("restartGame",61,7b,bf,3d));
	outFields->push(HX_("musicOptionDscSLC",b0,f5,a8,30));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo OptionsState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(OptionsState_obj,musicOption),HX_("musicOption",fa,a1,bb,6d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(OptionsState_obj,musicOptionDsc),HX_("musicOptionDsc",1a,54,f2,a9)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(OptionsState_obj,backToMenu),HX_("backToMenu",41,96,9c,bc)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(OptionsState_obj,applyButton),HX_("applyButton",00,22,db,15)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(OptionsState_obj,restartGame),HX_("restartGame",61,7b,bf,3d)},
	{::hx::fsInt,(int)offsetof(OptionsState_obj,musicOptionDscSLC),HX_("musicOptionDscSLC",b0,f5,a8,30)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *OptionsState_obj_sStaticStorageInfo = 0;
#endif

static ::String OptionsState_obj_sMemberFields[] = {
	HX_("musicOption",fa,a1,bb,6d),
	HX_("musicOptionDsc",1a,54,f2,a9),
	HX_("backToMenu",41,96,9c,bc),
	HX_("applyButton",00,22,db,15),
	HX_("restartGame",61,7b,bf,3d),
	HX_("musicOptionDscSLC",b0,f5,a8,30),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("removeRestart",eb,23,60,43),
	::String(null()) };

::hx::Class OptionsState_obj::__mClass;

static ::String OptionsState_obj_sStaticFields[] = {
	HX_("applySettings",71,dc,72,cb),
	::String(null())
};

void OptionsState_obj::__register()
{
	OptionsState_obj _hx_dummy;
	OptionsState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.OptionsState",9f,9c,96,4d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &OptionsState_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(OptionsState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(OptionsState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< OptionsState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = OptionsState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = OptionsState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
