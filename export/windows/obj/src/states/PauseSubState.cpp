// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_states_PauseSubState
#include <states/PauseSubState.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_142ebd419b8e5d4b_8_new,"states.PauseSubState","new",0xd30fb3ad,"states.PauseSubState.new","states/PauseSubState.hx",8,0xa2e4f264)
HX_LOCAL_STACK_FRAME(_hx_pos_142ebd419b8e5d4b_19_create,"states.PauseSubState","create",0x0e88d1cf,"states.PauseSubState.create","states/PauseSubState.hx",19,0xa2e4f264)
HX_LOCAL_STACK_FRAME(_hx_pos_142ebd419b8e5d4b_29_update,"states.PauseSubState","update",0x197ef0dc,"states.PauseSubState.update","states/PauseSubState.hx",29,0xa2e4f264)
namespace states{

void PauseSubState_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_142ebd419b8e5d4b_8_new)
HXLINE(  11)		this->backText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,650,::flixel::FlxG_obj::width,HX_("Back",47,06,ea,2b),32,null());
HXLINE(  10)		this->pauseText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,300,::flixel::FlxG_obj::width,HX_("PAUSED",ae,ec,06,a2),64,null());
HXLINE(  15)		super::__construct(-16777216);
            	}

Dynamic PauseSubState_obj::__CreateEmpty() { return new PauseSubState_obj; }

void *PauseSubState_obj::_hx_vtable = 0;

Dynamic PauseSubState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PauseSubState_obj > _hx_result = new PauseSubState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PauseSubState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5661ffbf) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x13a4f91d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x13a4f91d;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x5661ffbf;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void PauseSubState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_142ebd419b8e5d4b_19_create)
HXLINE(  20)		this->super::create();
HXLINE(  22)		this->pauseText->setFormat(null(),64,-1,HX_("center",d5,25,db,05),null(),null(),null());
HXLINE(  23)		this->backText->setFormat(null(),32,-1,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE(  24)		this->add(this->pauseText);
HXLINE(  25)		this->add(this->backText);
            	}


void PauseSubState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_142ebd419b8e5d4b_29_update)
HXLINE(  30)		this->super::update(elapsed);
HXLINE(  32)		bool _hx_tmp;
HXDLIN(  32)		if (::flixel::FlxG_obj::mouse->overlaps(this->backText,null())) {
HXLINE(  32)			_hx_tmp = (::flixel::FlxG_obj::mouse->_leftButton->current == 2);
            		}
            		else {
HXLINE(  32)			_hx_tmp = false;
            		}
HXDLIN(  32)		if (_hx_tmp) {
HXLINE(  34)			this->close();
            		}
            	}



::hx::ObjectPtr< PauseSubState_obj > PauseSubState_obj::__new() {
	::hx::ObjectPtr< PauseSubState_obj > __this = new PauseSubState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PauseSubState_obj > PauseSubState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PauseSubState_obj *__this = (PauseSubState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PauseSubState_obj), true, "states.PauseSubState"));
	*(void **)__this = PauseSubState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PauseSubState_obj::PauseSubState_obj()
{
}

void PauseSubState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PauseSubState);
	HX_MARK_MEMBER_NAME(pauseText,"pauseText");
	HX_MARK_MEMBER_NAME(backText,"backText");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PauseSubState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pauseText,"pauseText");
	HX_VISIT_MEMBER_NAME(backText,"backText");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PauseSubState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"backText") ) { return ::hx::Val( backText ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pauseText") ) { return ::hx::Val( pauseText ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PauseSubState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"backText") ) { backText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"pauseText") ) { pauseText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PauseSubState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pauseText",c3,82,60,51));
	outFields->push(HX_("backText",74,72,f9,0f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PauseSubState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PauseSubState_obj,pauseText),HX_("pauseText",c3,82,60,51)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PauseSubState_obj,backText),HX_("backText",74,72,f9,0f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PauseSubState_obj_sStaticStorageInfo = 0;
#endif

static ::String PauseSubState_obj_sMemberFields[] = {
	HX_("pauseText",c3,82,60,51),
	HX_("backText",74,72,f9,0f),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class PauseSubState_obj::__mClass;

void PauseSubState_obj::__register()
{
	PauseSubState_obj _hx_dummy;
	PauseSubState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("states.PauseSubState",3b,59,8f,1e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PauseSubState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PauseSubState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PauseSubState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PauseSubState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace states
