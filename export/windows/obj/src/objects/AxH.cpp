// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_Timer
#include <haxe/Timer.h>
#endif
#ifndef INCLUDED_objects_AxH
#include <objects/AxH.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a7eda00566f616a2_12_new,"objects.AxH","new",0x104eb729,"objects.AxH.new","objects/AxH.hx",12,0xb9279728)
HX_LOCAL_STACK_FRAME(_hx_pos_a7eda00566f616a2_16_wait,"objects.AxH","wait",0x3a81638c,"objects.AxH.wait","objects/AxH.hx",16,0xb9279728)
HX_LOCAL_STACK_FRAME(_hx_pos_a7eda00566f616a2_20_cloneRepository,"objects.AxH","cloneRepository",0x84dc3d90,"objects.AxH.cloneRepository","objects/AxH.hx",20,0xb9279728)
namespace objects{

void AxH_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_a7eda00566f616a2_12_new)
HXDLIN(  12)		super::__construct();
            	}

Dynamic AxH_obj::__CreateEmpty() { return new AxH_obj; }

void *AxH_obj::_hx_vtable = 0;

Dynamic AxH_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< AxH_obj > _hx_result = new AxH_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool AxH_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x152729fd) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x152729fd;
	} else {
		return inClassId==(int)0x7ccf8994;
	}
}

void AxH_obj::wait(int milliseconds, ::Dynamic callback){
            	HX_STACKFRAME(&_hx_pos_a7eda00566f616a2_16_wait)
HXDLIN(  16)		::haxe::Timer_obj::delay(callback,milliseconds);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AxH_obj,wait,(void))

void AxH_obj::cloneRepository(::String repositoryUrl,::String destination){
            	HX_STACKFRAME(&_hx_pos_a7eda00566f616a2_20_cloneRepository)
HXLINE(  21)		::String gitCommand = (((HX_("git clone ",71,b8,d2,0e) + repositoryUrl) + HX_(" ",20,00,00,00)) + destination);
HXLINE(  24)		int result = ::Sys_obj::command(gitCommand,null());
HXLINE(  25)		::haxe::Log_obj::trace(result,::hx::SourceInfo(HX_("source/objects/AxH.hx",1c,69,c1,82),25,HX_("objects.AxH",b7,ee,af,31),HX_("cloneRepository",47,cd,fd,b0)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(AxH_obj,cloneRepository,(void))


::hx::ObjectPtr< AxH_obj > AxH_obj::__new() {
	::hx::ObjectPtr< AxH_obj > __this = new AxH_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< AxH_obj > AxH_obj::__alloc(::hx::Ctx *_hx_ctx) {
	AxH_obj *__this = (AxH_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AxH_obj), true, "objects.AxH"));
	*(void **)__this = AxH_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

AxH_obj::AxH_obj()
{
}

bool AxH_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"wait") ) { outValue = wait_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"cloneRepository") ) { outValue = cloneRepository_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *AxH_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *AxH_obj_sStaticStorageInfo = 0;
#endif

::hx::Class AxH_obj::__mClass;

static ::String AxH_obj_sStaticFields[] = {
	HX_("wait",75,5a,f2,4e),
	HX_("cloneRepository",47,cd,fd,b0),
	::String(null())
};

void AxH_obj::__register()
{
	AxH_obj _hx_dummy;
	AxH_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.AxH",b7,ee,af,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &AxH_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(AxH_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< AxH_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AxH_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AxH_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
