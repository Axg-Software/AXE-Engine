// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_objects_WaterMark
#include <objects/WaterMark.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ed6f64fd32832cae_9_new,"objects.WaterMark","new",0xf7b1ad7c,"objects.WaterMark.new","objects/WaterMark.hx",9,0x9cf612f5)
namespace objects{

void WaterMark_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_ed6f64fd32832cae_9_new)
HXLINE(  10)		super::__construct(null(),null(),null(),null(),null(),null());
HXLINE(  11)		this->set_width(( (Float)(32) ));
HXLINE(  12)		this->set_size(16);
HXLINE(  13)		this->set_text(HX_("AXE Engine V1.2",6b,f1,20,5b));
HXLINE(  14)		this->set_y(( (Float)(681) ));
            	}

Dynamic WaterMark_obj::__CreateEmpty() { return new WaterMark_obj; }

void *WaterMark_obj::_hx_vtable = 0;

Dynamic WaterMark_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WaterMark_obj > _hx_result = new WaterMark_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool WaterMark_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x752f90b6) {
		if (inClassId<=(int)0x50f27350) {
			if (inClassId<=(int)0x2c01639b) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
			} else {
				return inClassId==(int)0x50f27350;
			}
		} else {
			return inClassId==(int)0x752f90b6;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}


::hx::ObjectPtr< WaterMark_obj > WaterMark_obj::__new() {
	::hx::ObjectPtr< WaterMark_obj > __this = new WaterMark_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< WaterMark_obj > WaterMark_obj::__alloc(::hx::Ctx *_hx_ctx) {
	WaterMark_obj *__this = (WaterMark_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WaterMark_obj), true, "objects.WaterMark"));
	*(void **)__this = WaterMark_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

WaterMark_obj::WaterMark_obj()
{
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *WaterMark_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *WaterMark_obj_sStaticStorageInfo = 0;
#endif

::hx::Class WaterMark_obj::__mClass;

void WaterMark_obj::__register()
{
	WaterMark_obj _hx_dummy;
	WaterMark_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.WaterMark",8a,7f,fe,28);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< WaterMark_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WaterMark_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WaterMark_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace objects
