// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_5f5af744d9ff5693
#define INCLUDED_5f5af744d9ff5693
#include "cpp/Pointer.h"
#endif
#ifndef INCLUDED_0e0693b5ce2fed3b
#define INCLUDED_0e0693b5ce2fed3b
#include "discord_register.h"
#endif
#ifndef INCLUDED_4d2c8952d9865d7f
#define INCLUDED_4d2c8952d9865d7f
#include "discord_rpc.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_app__Event_Int_Void
#include <lime/app/_Event_Int_Void.h>
#endif
#ifndef INCLUDED_objects_handlers_DiscordHandler
#include <objects/handlers/DiscordHandler.h>
#endif
#ifndef INCLUDED_sys_thread__Thread_HaxeThread
#include <sys/thread/_Thread/HaxeThread.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_7c17c39c86c111e5_28_init,"objects.handlers.DiscordHandler","init",0x53d65235,"objects.handlers.DiscordHandler.init","objects/handlers/DiscordHandler.hx",28,0xd9539b15)
HX_LOCAL_STACK_FRAME(_hx_pos_7c17c39c86c111e5_42_init,"objects.handlers.DiscordHandler","init",0x53d65235,"objects.handlers.DiscordHandler.init","objects/handlers/DiscordHandler.hx",42,0xd9539b15)
HX_LOCAL_STACK_FRAME(_hx_pos_7c17c39c86c111e5_17_init,"objects.handlers.DiscordHandler","init",0x53d65235,"objects.handlers.DiscordHandler.init","objects/handlers/DiscordHandler.hx",17,0xd9539b15)
HX_LOCAL_STACK_FRAME(_hx_pos_7c17c39c86c111e5_49_onReady,"objects.handlers.DiscordHandler","onReady",0x3e1a6cbf,"objects.handlers.DiscordHandler.onReady","objects/handlers/DiscordHandler.hx",49,0xd9539b15)
HX_LOCAL_STACK_FRAME(_hx_pos_7c17c39c86c111e5_68_onDisconnected,"objects.handlers.DiscordHandler","onDisconnected",0x31fe42df,"objects.handlers.DiscordHandler.onDisconnected","objects/handlers/DiscordHandler.hx",68,0xd9539b15)
HX_LOCAL_STACK_FRAME(_hx_pos_7c17c39c86c111e5_73_onError,"objects.handlers.DiscordHandler","onError",0xca899824,"objects.handlers.DiscordHandler.onError","objects/handlers/DiscordHandler.hx",73,0xd9539b15)
HX_LOCAL_STACK_FRAME(_hx_pos_7c17c39c86c111e5_14_boot,"objects.handlers.DiscordHandler","boot",0x4f369b57,"objects.handlers.DiscordHandler.boot","objects/handlers/DiscordHandler.hx",14,0xd9539b15)
namespace objects{
namespace handlers{

void DiscordHandler_obj::__construct() { }

Dynamic DiscordHandler_obj::__CreateEmpty() { return new DiscordHandler_obj; }

void *DiscordHandler_obj::_hx_vtable = 0;

Dynamic DiscordHandler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DiscordHandler_obj > _hx_result = new DiscordHandler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool DiscordHandler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x2c3955b7;
}

bool DiscordHandler_obj::_revokeLoop;

void DiscordHandler_obj::init(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_7c17c39c86c111e5_28_init)
HXLINE(  28)			while(!(::objects::handlers::DiscordHandler_obj::_revokeLoop)){
HXLINE(  36)				Discord_RunCallbacks();
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(int exitCode){
            			HX_STACKFRAME(&_hx_pos_7c17c39c86c111e5_42_init)
HXLINE(  42)			Discord_Shutdown();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_7c17c39c86c111e5_17_init)
HXLINE(  19)		 DiscordEventHandlers handlers = DiscordEventHandlers();
HXLINE(  20)		handlers.ready = ::cpp::Function< void (const  DiscordUser*)>(::hx::AnyCast(&::objects::handlers::DiscordHandler_obj::onReady ));
HXLINE(  21)		handlers.disconnected = ::cpp::Function< void (int,const char*)>(::hx::AnyCast(&::objects::handlers::DiscordHandler_obj::onDisconnected ));
HXLINE(  22)		handlers.errored = ::cpp::Function< void (int,const char*)>(::hx::AnyCast(&::objects::handlers::DiscordHandler_obj::onError ));
HXLINE(  23)		const char* this1 = HX_("1243718969635110993",5d,19,8a,6f).utf8_str();
HXDLIN(  23)		Discord_Initialize(this1,&(handlers),1,null());
HXLINE(  26)		::sys::thread::_Thread::HaxeThread_obj::create( ::Dynamic(new _hx_Closure_0()),false);
HXLINE(  40)		::lime::app::Application_obj::current->onExit->add( ::Dynamic(new _hx_Closure_1()),true,4000);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(DiscordHandler_obj,init,(void))

void DiscordHandler_obj::onReady(const  DiscordUser* request){
            	HX_STACKFRAME(&_hx_pos_7c17c39c86c111e5_49_onReady)
HXLINE(  50)		 DiscordUser * requestPtr = cpp::Pointer_obj::fromRaw(request)->ptr;
HXLINE(  52)		if (::hx::IsNotEq( ::Std_obj::parseInt(::hx::TCast< ::String >::cast((*(requestPtr)).discriminator)),0 )) {
HXLINE(  53)			::Sys_obj::println(((((HX_("(Discord) Connected to User (",a6,14,1f,94) + ::hx::TCast< ::String >::cast((*(requestPtr)).username)) + HX_("#",23,00,00,00)) + ::hx::TCast< ::String >::cast((*(requestPtr)).discriminator)) + HX_(")",29,00,00,00)));
            		}
            		else {
HXLINE(  55)			::Sys_obj::println(((HX_("(Discord) Connected to User (",a6,14,1f,94) + ::hx::TCast< ::String >::cast((*(requestPtr)).username)) + HX_(")",29,00,00,00)));
            		}
HXLINE(  57)		 DiscordRichPresence discordPresence = DiscordRichPresence();
HXLINE(  58)		discordPresence.state = HX_("AXE Engine",54,de,44,24).utf8_str();
HXLINE(  59)		discordPresence.details = HX_("In Engine",9d,8e,4b,1e).utf8_str();
HXLINE(  60)		discordPresence.largeImageKey = HX_("discordicon",25,e7,a3,8c).utf8_str();
HXLINE(  61)		Discord_UpdatePresence(&(discordPresence));
HXLINE(  63)		::objects::handlers::DiscordHandler_obj::_revokeLoop = true;
            	}


void DiscordHandler_obj::onDisconnected(int errorCode,const char* message){
            	HX_STACKFRAME(&_hx_pos_7c17c39c86c111e5_68_onDisconnected)
HXDLIN(  68)		::Sys_obj::println(((((HX_("Discord: Disconnected (",55,e3,d3,96) + errorCode) + HX_(": ",a6,32,00,00)) + ::hx::TCast< ::String >::cast(message)) + HX_(")",29,00,00,00)));
            	}


void DiscordHandler_obj::onError(int errorCode,const char* message){
            	HX_STACKFRAME(&_hx_pos_7c17c39c86c111e5_73_onError)
HXDLIN(  73)		::Sys_obj::println(((((HX_("Discord: Error (",be,2c,cb,1b) + errorCode) + HX_(": ",a6,32,00,00)) + ::hx::TCast< ::String >::cast(message)) + HX_(")",29,00,00,00)));
            	}



DiscordHandler_obj::DiscordHandler_obj()
{
}

bool DiscordHandler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"_revokeLoop") ) { outValue = ( _revokeLoop ); return true; }
	}
	return false;
}

bool DiscordHandler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"_revokeLoop") ) { _revokeLoop=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *DiscordHandler_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo DiscordHandler_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &DiscordHandler_obj::_revokeLoop,HX_("_revokeLoop",e9,b8,39,34)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void DiscordHandler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DiscordHandler_obj::_revokeLoop,"_revokeLoop");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DiscordHandler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DiscordHandler_obj::_revokeLoop,"_revokeLoop");
};

#endif

::hx::Class DiscordHandler_obj::__mClass;

static ::String DiscordHandler_obj_sStaticFields[] = {
	HX_("_revokeLoop",e9,b8,39,34),
	HX_("init",10,3b,bb,45),
	::String(null())
};

void DiscordHandler_obj::__register()
{
	DiscordHandler_obj _hx_dummy;
	DiscordHandler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("objects.handlers.DiscordHandler",69,9b,7a,c0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DiscordHandler_obj::__GetStatic;
	__mClass->mSetStaticField = &DiscordHandler_obj::__SetStatic;
	__mClass->mMarkFunc = DiscordHandler_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DiscordHandler_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< DiscordHandler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DiscordHandler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DiscordHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DiscordHandler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DiscordHandler_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7c17c39c86c111e5_14_boot)
HXDLIN(  14)		_revokeLoop = false;
            	}
}

} // end namespace objects
} // end namespace handlers
